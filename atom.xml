<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-09-22T09:25:15.591Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Jsong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mybatis自动生成代码</title>
    <link href="http://yoursite.com/2017/09/22/Mybatis-Generator/"/>
    <id>http://yoursite.com/2017/09/22/Mybatis-Generator/</id>
    <published>2017-09-22T07:57:36.000Z</published>
    <updated>2017-09-22T09:25:15.591Z</updated>
    
    <content type="html"><![CDATA[<h2 id="技术介绍"><a href="#技术介绍" class="headerlink" title="技术介绍"></a>技术介绍</h2><blockquote><p>引用MyBatis官网说明</p></blockquote><p>MyBatis Generator（MBG）是MyBatis MyBatis 和iBATIS的代码生成器。 它将生成所有版本的MyBatis的代码，以及版本2.2.0之后的iBATIS版本。它将内省数据库表（或许多表），并将生成可用于访问表的工具。这减少了设置对象和配置文件以与数据库表进行交互的最初烦恼。MBG旨在对简单的CRUD（创建，检索，更新，删除）的大量数据库操作产生重大影响。您仍然需要为连接查询或存储过程手动编写SQL和对象。</p><blockquote><p>简要介绍</p></blockquote><p>MyBatis Generator（MBG）工具根据generatorConfig.xml配置文件，将数据库表生成对应的JavaBean、mapper文件以及mapper文件对应的mapper.xml文件。</p><h2 id="相关文件"><a href="#相关文件" class="headerlink" title="相关文件"></a>相关文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mybatis-generator-core-1.3.3.jar<span class="comment">#mybatis-generator核心jar</span></div><div class="line">mysql-connector-java-5.1.44-bin.jar<span class="comment">#数据库连接jar</span></div><div class="line">generatorConfig.xml<span class="comment">#mybatis-generator配置文件</span></div></pre></td></tr></table></figure><a id="more"></a><h2 id="生成代码"><a href="#生成代码" class="headerlink" title="生成代码"></a>生成代码</h2><p>1.创建文件夹<br><img src="/2017/09/22/Mybatis-Generator/image1.png" alt=""></p><blockquote><p>图为：准备好相关文件（需要手动创建src文件夹）</p></blockquote><p>2配置generatorConfig.xml文件</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;    &lt;!DOCTYPE generatorConfiguration PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;&lt;generatorConfiguration&gt;    &lt;!-- 数据库驱动--&gt;        &lt;classPathEntry  location=&quot;mysql-connector-java-5.1.25-bin.jar&quot;/&gt;        &lt;context id=&quot;DB2Tables&quot;  targetRuntime=&quot;MyBatis3&quot;&gt;            &lt;commentGenerator&gt;                &lt;property name=&quot;suppressDate&quot; value=&quot;true&quot;/&gt;                &lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;                &lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot;/&gt;            &lt;/commentGenerator&gt;            &lt;!--数据库链接URL，用户名、密码 --&gt;            &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot; connectionURL=&quot;jdbc:mysql://125.221.1.1/db_124&quot; userId=&quot;dem&quot; password=&quot;dem&quot;&gt;            &lt;/jdbcConnection&gt;            &lt;javaTypeResolver&gt;                &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot;/&gt;            &lt;/javaTypeResolver&gt;            &lt;!-- 生成模型的包名和位置--&gt;            &lt;javaModelGenerator targetPackage=&quot;test.domain&quot; targetProject=&quot;src&quot;&gt;                &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;                &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot;/&gt;            &lt;/javaModelGenerator&gt;            &lt;!-- 生成映射文件的包名和位置--&gt;            &lt;sqlMapGenerator targetPackage=&quot;test.mapping&quot; targetProject=&quot;src&quot;&gt;                &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;            &lt;/sqlMapGenerator&gt;            &lt;!-- 生成DAO的包名和位置--&gt;            &lt;javaClientGenerator type=&quot;XMLMAPPER&quot; targetPackage=&quot;test.IDao&quot; targetProject=&quot;src&quot;&gt;                &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;            &lt;/javaClientGenerator&gt;            &lt;!-- 要生成的表 tableName是数据库中的表名或视图名 domainObjectName是实体类名--&gt;            &lt;table tableName=&quot;user_info_t&quot; domainObjectName=&quot;User&quot; enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot; enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot; selectByExampleQueryId=&quot;false&quot;&gt;&lt;/table&gt;      &lt;/context&gt;        &lt;/generatorConfiguration&gt;  </code></pre><p>3.执行代码生成命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar mybatis-generator-core-1.3.2.jar -configfile generatorConfig.xml -overwrite<span class="comment">#生成代码命令</span></div></pre></td></tr></table></figure></p><p><img src="/2017/09/22/Mybatis-Generator/image2.png" alt=""></p><blockquote><p>图为：代码成功生成截图</p></blockquote><h2 id="参考文件"><a href="#参考文件" class="headerlink" title="参考文件"></a>参考文件</h2><p>generatorConfig.xml配置文件详解</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE generatorConfigurationPUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;   &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;&lt;!-- 配置生成器 --&gt;&lt;generatorConfiguration&gt;&lt;!-- 可以用于加载配置项或者配置文件，在整个配置文件中就可以使用${propertyKey}的方式来引用配置项    resource：配置资源加载地址，使用resource，MBG从classpath开始找，比如com/myproject/generatorConfig.properties            url：配置资源加载地质，使用URL的方式，比如file:///C:/myfolder/generatorConfig.properties.    注意，两个属性只能选址一个;    另外，如果使用了mybatis-generator-maven-plugin，那么在pom.xml中定义的properties都可以直接在generatorConfig.xml中使用&lt;properties resource=&quot;&quot; url=&quot;&quot; /&gt; --&gt;&lt;!-- 在MBG工作的时候，需要额外加载的依赖包    location属性指明加载jar/zip包的全路径&lt;classPathEntry location=&quot;/Program Files/IBM/SQLLIB/java/db2java.zip&quot; /&gt; --&gt;&lt;!--     context:生成一组对象的环境     id:必选，上下文id，用于在生成错误时提示    defaultModelType:指定生成对象的样式        1，conditional：类似hierarchical；        2，flat：所有内容（主键，blob）等全部生成在一个对象中；        3，hierarchical：主键生成一个XXKey对象(key class)，Blob等单独生成一个对象，其他简单属性在一个对象中(record class)    targetRuntime:        1，MyBatis3：默认的值，生成基于MyBatis3.x以上版本的内容，包括XXXBySample；        2，MyBatis3Simple：类似MyBatis3，只是不生成XXXBySample；    introspectedColumnImpl：类全限定名，用于扩展MBG --&gt;&lt;context id=&quot;mysql&quot; defaultModelType=&quot;hierarchical&quot; targetRuntime=&quot;MyBatis3Simple&quot; &gt;    &lt;!-- 自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表；        一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖     --&gt;    &lt;property name=&quot;autoDelimitKeywords&quot; value=&quot;false&quot;/&gt;    &lt;!-- 生成的Java文件的编码 --&gt;    &lt;property name=&quot;javaFileEncoding&quot; value=&quot;UTF-8&quot;/&gt;    &lt;!-- 格式化java代码 --&gt;    &lt;property name=&quot;javaFormatter&quot; value=&quot;org.mybatis.generator.api.dom.DefaultJavaFormatter&quot;/&gt;    &lt;!-- 格式化XML代码 --&gt;    &lt;property name=&quot;xmlFormatter&quot; value=&quot;org.mybatis.generator.api.dom.DefaultXmlFormatter&quot;/&gt;    &lt;!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； --&gt;    &lt;property name=&quot;beginningDelimiter&quot; value=&quot;`&quot;/&gt;    &lt;property name=&quot;endingDelimiter&quot; value=&quot;`&quot;/&gt;    &lt;!-- 必须要有的，使用这个配置链接数据库        @TODO:是否可以扩展     --&gt;    &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot; connectionURL=&quot;jdbc:mysql:///pss&quot; userId=&quot;root&quot; password=&quot;admin&quot;&gt;        &lt;!-- 这里面可以设置property属性，每一个property属性都设置到配置的Driver上 --&gt;    &lt;/jdbcConnection&gt;    &lt;!-- java类型处理器         用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl；        注意一点，默认会先尝试使用Integer，Long，Short等来对应DECIMAL和 NUMERIC数据类型；      --&gt;    &lt;javaTypeResolver type=&quot;org.mybatis.generator.internal.types.JavaTypeResolverDefaultImpl&quot;&gt;        &lt;!--             true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型            false：默认,                scale&gt;0;length&gt;18：使用BigDecimal;                scale=0;length[10,18]：使用Long；                scale=0;length[5,9]：使用Integer；                scale=0;length&lt;5：使用Short；         --&gt;        &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot;/&gt;    &lt;/javaTypeResolver&gt;    &lt;!-- java模型创建器，是必须要的元素        负责：1，key类（见context的defaultModelType）；2，java类；3，查询类        targetPackage：生成的类要放的包，真实的包受enableSubPackages属性控制；        targetProject：目标项目，指定一个存在的目录下，生成的内容会放到指定目录中，如果目录不存在，MBG不会自动建目录     --&gt;    &lt;javaModelGenerator targetPackage=&quot;com._520it.mybatis.domain&quot; targetProject=&quot;src/main/java&quot;&gt;        &lt;!--  for MyBatis3/MyBatis3Simple            自动为每一个生成的类创建一个构造方法，构造方法包含了所有的field；而不是使用setter；         --&gt;        &lt;property name=&quot;constructorBased&quot; value=&quot;false&quot;/&gt;        &lt;!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false --&gt;        &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;        &lt;!-- for MyBatis3 / MyBatis3Simple            是否创建一个不可变的类，如果为true，            那么MBG会创建一个没有setter方法的类，取而代之的是类似constructorBased的类         --&gt;        &lt;property name=&quot;immutable&quot; value=&quot;false&quot;/&gt;        &lt;!-- 设置一个根对象，            如果设置了这个根对象，那么生成的keyClass或者recordClass会继承这个类；在Table的rootClass属性中可以覆盖该选项            注意：如果在key class或者record class中有root class相同的属性，MBG就不会重新生成这些属性了，包括：                1，属性名相同，类型相同，有相同的getter/setter方法；         --&gt;        &lt;property name=&quot;rootClass&quot; value=&quot;com._520it.mybatis.domain.BaseDomain&quot;/&gt;        &lt;!-- 设置是否在getter方法中，对String类型字段调用trim()方法 --&gt;        &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot;/&gt;    &lt;/javaModelGenerator&gt;    &lt;!-- 生成SQL map的XML文件生成器，        注意，在Mybatis3之后，我们可以使用mapper.xml文件+Mapper接口（或者不用mapper接口），            或者只使用Mapper接口+Annotation，所以，如果 javaClientGenerator配置中配置了需要生成XML的话，这个元素就必须配置        targetPackage/targetProject:同javaModelGenerator     --&gt;    &lt;sqlMapGenerator targetPackage=&quot;com._520it.mybatis.mapper&quot; targetProject=&quot;src/main/resources&quot;&gt;        &lt;!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false --&gt;        &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;    &lt;/sqlMapGenerator&gt;    &lt;!-- 对于mybatis来说，即生成Mapper接口，注意，如果没有配置该元素，那么默认不会生成Mapper接口         targetPackage/targetProject:同javaModelGenerator        type：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）：            1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML；            2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中；            3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML；        注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER     --&gt;    &lt;javaClientGenerator targetPackage=&quot;com._520it.mybatis.mapper&quot; type=&quot;ANNOTATEDMAPPER&quot; targetProject=&quot;src/main/java&quot;&gt;        &lt;!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false --&gt;        &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;        &lt;!-- 可以为所有生成的接口添加一个父接口，但是MBG只负责生成，不负责检查        &lt;property name=&quot;rootInterface&quot; value=&quot;&quot;/&gt;         --&gt;    &lt;/javaClientGenerator&gt;    &lt;!-- 选择一个table来生成相关文件，可以有一个或多个table，必须要有table元素        选择的table会生成一下文件：        1，SQL map文件        2，生成一个主键类；        3，除了BLOB和主键的其他字段的类；        4，包含BLOB的类；        5，一个用户生成动态查询的条件类（selectByExample, deleteByExample），可选；        6，Mapper接口（可选）        tableName（必要）：要生成对象的表名；        注意：大小写敏感问题。正常情况下，MBG会自动的去识别数据库标识符的大小写敏感度，在一般情况下，MBG会            根据设置的schema，catalog或tablename去查询数据表，按照下面的流程：            1，如果schema，catalog或tablename中有空格，那么设置的是什么格式，就精确的使用指定的大小写格式去查询；            2，否则，如果数据库的标识符使用大写的，那么MBG自动把表名变成大写再查找；            3，否则，如果数据库的标识符使用小写的，那么MBG自动把表名变成小写再查找；            4，否则，使用指定的大小写格式查询；        另外的，如果在创建表的时候，使用的&quot;&quot;把数据库对象规定大小写，就算数据库标识符是使用的大写，在这种情况下也会使用给定的大小写来创建表名；        这个时候，请设置delimitIdentifiers=&quot;true&quot;即可保留大小写格式；        可选：        1，schema：数据库的schema；        2，catalog：数据库的catalog；        3，alias：为数据表设置的别名，如果设置了alias，那么生成的所有的SELECT SQL语句中，列名会变成：alias_actualColumnName        4，domainObjectName：生成的domain类的名字，如果不设置，直接使用表名作为domain类的名字；可以设置为somepck.domainName，那么会自动把domainName类再放到somepck包里面；        5，enableInsert（默认true）：指定是否生成insert语句；        6，enableSelectByPrimaryKey（默认true）：指定是否生成按照主键查询对象的语句（就是getById或get）；        7，enableSelectByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询语句；        8，enableUpdateByPrimaryKey（默认true）：指定是否生成按照主键修改对象的语句（即update)；        9，enableDeleteByPrimaryKey（默认true）：指定是否生成按照主键删除对象的语句（即delete）；        10，enableDeleteByExample（默认true）：MyBatis3Simple为false，指定是否生成动态删除语句；        11，enableCountByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询总条数语句（用于分页的总条数查询）；        12，enableUpdateByExample（默认true）：MyBatis3Simple为false，指定是否生成动态修改语句（只修改对象中不为空的属性）；        13，modelType：参考context元素的defaultModelType，相当于覆盖；        14，delimitIdentifiers：参考tableName的解释，注意，默认的delimitIdentifiers是双引号，如果类似MYSQL这样的数据库，使用的是`（反引号，那么还需要设置context的beginningDelimiter和endingDelimiter属性）        15，delimitAllColumns：设置是否所有生成的SQL中的列名都使用标识符引起来。默认为false，delimitIdentifiers参考context的属性        注意，table里面很多参数都是对javaModelGenerator，context等元素的默认属性的一个复写；     --&gt;    &lt;table tableName=&quot;userinfo&quot; &gt;        &lt;!-- 参考 javaModelGenerator 的 constructorBased属性--&gt;        &lt;property name=&quot;constructorBased&quot; value=&quot;false&quot;/&gt;        &lt;!-- 默认为false，如果设置为true，在生成的SQL中，table名字不会加上catalog或schema； --&gt;        &lt;property name=&quot;ignoreQualifiersAtRuntime&quot; value=&quot;false&quot;/&gt;        &lt;!-- 参考 javaModelGenerator 的 immutable 属性 --&gt;        &lt;property name=&quot;immutable&quot; value=&quot;false&quot;/&gt;        &lt;!-- 指定是否只生成domain类，如果设置为true，只生成domain类，如果还配置了sqlMapGenerator，那么在mapper XML文件中，只生成resultMap元素 --&gt;        &lt;property name=&quot;modelOnly&quot; value=&quot;false&quot;/&gt;        &lt;!-- 参考 javaModelGenerator 的 rootClass 属性         &lt;property name=&quot;rootClass&quot; value=&quot;&quot;/&gt;         --&gt;        &lt;!-- 参考javaClientGenerator 的  rootInterface 属性        &lt;property name=&quot;rootInterface&quot; value=&quot;&quot;/&gt;        --&gt;        &lt;!-- 如果设置了runtimeCatalog，那么在生成的SQL中，使用该指定的catalog，而不是table元素上的catalog         &lt;property name=&quot;runtimeCatalog&quot; value=&quot;&quot;/&gt;        --&gt;        &lt;!-- 如果设置了runtimeSchema，那么在生成的SQL中，使用该指定的schema，而不是table元素上的schema         &lt;property name=&quot;runtimeSchema&quot; value=&quot;&quot;/&gt;        --&gt;        &lt;!-- 如果设置了runtimeTableName，那么在生成的SQL中，使用该指定的tablename，而不是table元素上的tablename         &lt;property name=&quot;runtimeTableName&quot; value=&quot;&quot;/&gt;        --&gt;        &lt;!-- 注意，该属性只针对MyBatis3Simple有用；            如果选择的runtime是MyBatis3Simple，那么会生成一个SelectAll方法，如果指定了selectAllOrderByClause，那么会在该SQL中添加指定的这个order条件；         --&gt;        &lt;property name=&quot;selectAllOrderByClause&quot; value=&quot;age desc,username asc&quot;/&gt;        &lt;!-- 如果设置为true，生成的model类会直接使用column本身的名字，而不会再使用驼峰命名方法，比如BORN_DATE，生成的属性名字就是BORN_DATE,而不会是bornDate --&gt;        &lt;property name=&quot;useActualColumnNames&quot; value=&quot;false&quot;/&gt;        &lt;!-- generatedKey用于生成生成主键的方法，            如果设置了该元素，MBG会在生成的&lt;insert&gt;元素中生成一条正确的&lt;selectKey&gt;元素，该元素可选            column:主键的列名；            sqlStatement：要生成的selectKey语句，有以下可选项：                Cloudscape:相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()                DB2       :相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()                DB2_MF    :相当于selectKey的SQL为：SELECT IDENTITY_VAL_LOCAL() FROM SYSIBM.SYSDUMMY1                Derby      :相当于selectKey的SQL为：VALUES IDENTITY_VAL_LOCAL()                HSQLDB      :相当于selectKey的SQL为：CALL IDENTITY()                Informix  :相当于selectKey的SQL为：select dbinfo(&apos;sqlca.sqlerrd1&apos;) from systables where tabid=1                MySql      :相当于selectKey的SQL为：SELECT LAST_INSERT_ID()                SqlServer :相当于selectKey的SQL为：SELECT SCOPE_IDENTITY()                SYBASE      :相当于selectKey的SQL为：SELECT @@IDENTITY                JDBC      :相当于在生成的insert元素上添加useGeneratedKeys=&quot;true&quot;和keyProperty属性        &lt;generatedKey column=&quot;&quot; sqlStatement=&quot;&quot;/&gt;         --&gt;        &lt;!--             该元素会在根据表中列名计算对象属性名之前先重命名列名，非常适合用于表中的列都有公用的前缀字符串的时候，            比如列名为：CUST_ID,CUST_NAME,CUST_EMAIL,CUST_ADDRESS等；            那么就可以设置searchString为&quot;^CUST_&quot;，并使用空白替换，那么生成的Customer对象中的属性名称就不是            custId,custName等，而是先被替换为ID,NAME,EMAIL,然后变成属性：id，name，email；            注意，MBG是使用java.util.regex.Matcher.replaceAll来替换searchString和replaceString的，            如果使用了columnOverride元素，该属性无效；        &lt;columnRenamingRule searchString=&quot;&quot; replaceString=&quot;&quot;/&gt;         --&gt;         &lt;!-- 用来修改表中某个列的属性，MBG会使用修改后的列来生成domain的属性；             column:要重新设置的列名；             注意，一个table元素中可以有多个columnOverride元素哈~          --&gt;         &lt;columnOverride column=&quot;username&quot;&gt;             &lt;!-- 使用property属性来指定列要生成的属性名称 --&gt;             &lt;property name=&quot;property&quot; value=&quot;userName&quot;/&gt;             &lt;!-- javaType用于指定生成的domain的属性类型，使用类型的全限定名             &lt;property name=&quot;javaType&quot; value=&quot;&quot;/&gt;              --&gt;             &lt;!-- jdbcType用于指定该列的JDBC类型              &lt;property name=&quot;jdbcType&quot; value=&quot;&quot;/&gt;              --&gt;             &lt;!-- typeHandler 用于指定该列使用到的TypeHandler，如果要指定，配置类型处理器的全限定名                 注意，mybatis中，不会生成到mybatis-config.xml中的typeHandler                 只会生成类似：where id = #{id,jdbcType=BIGINT,typeHandler=com._520it.mybatis.MyTypeHandler}的参数描述             &lt;property name=&quot;jdbcType&quot; value=&quot;&quot;/&gt;             --&gt;             &lt;!-- 参考table元素的delimitAllColumns配置，默认为false             &lt;property name=&quot;delimitedColumnName&quot; value=&quot;&quot;/&gt;              --&gt;         &lt;/columnOverride&gt;         &lt;!-- ignoreColumn设置一个MGB忽略的列，如果设置了改列，那么在生成的domain中，生成的SQL中，都不会有该列出现              column:指定要忽略的列的名字；             delimitedColumnName：参考table元素的delimitAllColumns配置，默认为false             注意，一个table元素中可以有多个ignoreColumn元素         &lt;ignoreColumn column=&quot;deptId&quot; delimitedColumnName=&quot;&quot;/&gt;         --&gt;    &lt;/table&gt;&lt;/context&gt;&lt;/generatorConfiguration&gt;作者：小码哥Java学院链接：http://www.jianshu.com/p/e09d2370b796來源：简书</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;技术介绍&quot;&gt;&lt;a href=&quot;#技术介绍&quot; class=&quot;headerlink&quot; title=&quot;技术介绍&quot;&gt;&lt;/a&gt;技术介绍&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;引用MyBatis官网说明&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;MyBatis Generator（MBG）是MyBatis MyBatis 和iBATIS的代码生成器。 它将生成所有版本的MyBatis的代码，以及版本2.2.0之后的iBATIS版本。它将内省数据库表（或许多表），并将生成可用于访问表的工具。这减少了设置对象和配置文件以与数据库表进行交互的最初烦恼。MBG旨在对简单的CRUD（创建，检索，更新，删除）的大量数据库操作产生重大影响。您仍然需要为连接查询或存储过程手动编写SQL和对象。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;简要介绍&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;MyBatis Generator（MBG）工具根据generatorConfig.xml配置文件，将数据库表生成对应的JavaBean、mapper文件以及mapper文件对应的mapper.xml文件。&lt;/p&gt;
&lt;h2 id=&quot;相关文件&quot;&gt;&lt;a href=&quot;#相关文件&quot; class=&quot;headerlink&quot; title=&quot;相关文件&quot;&gt;&lt;/a&gt;相关文件&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;mybatis-generator-core-1.3.3.jar		&lt;span class=&quot;comment&quot;&gt;#mybatis-generator核心jar&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mysql-connector-java-5.1.44-bin.jar	&lt;span class=&quot;comment&quot;&gt;#数据库连接jar&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;generatorConfig.xml					&lt;span class=&quot;comment&quot;&gt;#mybatis-generator配置文件&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="MyBatis Generator" scheme="http://yoursite.com/tags/MyBatis-Generator/"/>
    
  </entry>
  
  <entry>
    <title>个人博客搭建详解</title>
    <link href="http://yoursite.com/2017/09/14/create-blog/"/>
    <id>http://yoursite.com/2017/09/14/create-blog/</id>
    <published>2017-09-14T08:31:13.000Z</published>
    <updated>2017-09-15T10:07:34.415Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍如何使用Hexo+GitHub搭建一个使用域名访问的个人博客网站。由于没有数据库访问，也无需购买服务器，成本极低，非常适合搭建个人博客网站，本人还只是菜鸟，其中的内容有什么不正确的还请指正。  </p><h2 id="技术介绍"><a href="#技术介绍" class="headerlink" title="技术介绍"></a>技术介绍</h2><p>Hexo是基于Nodo.js的一个快速，简单和强大的博客框架。Hexo会将Markdown语言（或其他语言）中撰写帖子在几秒钟内生成具有美丽主题的静态文件。</p><p>Node.js 就是运行在服务端的 JavaScript。换句话说就是可以使用Node.js搭建静态服务器，Hexo就是基于Nodo.js的博客框架。</p><p>GitHub其实就是一个面向开源及私有软件项目的托管平台，GitHub pages是GitHub为我们免费提供的服务器，GitHub pages 会托管[用户名].github.io代码库中的全部代码，并自动运行，因此GitHub就可以作为我们服务器而不需要购买额外的服务器或者云主机。</p><h2 id="搭建步骤介绍"><a href="#搭建步骤介绍" class="headerlink" title="搭建步骤介绍"></a>搭建步骤介绍</h2><pre><code>1.安装Node.js2.安装git3.安装Hexo4.搭建GitHub5.配置GitHub与Hexo关联6.提交项目到GitHub7.安装主题8.图片连接</code></pre><a id="more"></a><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p><a href="https://nodejs.org/en/download/" target="_blank" rel="external">Node.js下载</a>以windows64位操作系统为例：选择Windows Installer(.msi) 64-bit</p><p>安装教程参考菜鸟教程：<a href="http://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="external">Node.js安装</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">node --version<span class="comment">#检查Nodo.js版本</span></div><div class="line">npm --v<span class="comment">#检查npm版本（Node.js中集成了npm）</span></div></pre></td></tr></table></figure><p>npm（Node Package Manager）是Node.js下的主流套件管理程序。它在Node.js v0.6.x版本后内建于Node系统。</p><p>##安装Git<br><a href="https://git-scm.com/download/win" target="_blank" rel="external">Git下载</a>以windows64位操作系统为例：选择64-bit Git for Windows Setup。<br>Git整个安装过程都是下一步、下一步直到完成安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git --version<span class="comment">#检查Git版本</span></div></pre></td></tr></table></figure><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>使用Hexo的理由：由于github pages存放的都是静态文件，无法动态为博客文本生成主题与样式，更别说文章的列表、分类、标签、翻页等动态内容，然而我们不得不手动更新文章目录和相关连接，并修改样式。极其麻烦。所以Hexo要做的就是在本地编辑好md文件（使用Markdown语法编辑的博客文档）后，通过命令的方式生成相关页面，最后再提交部署到github。</p><p>注意：Git安装完成后最好使用git bash编辑执行命令，因为cmd部分命令会出问题。</p><p>安装完成以上两个程序后，就可以使用npm安装Hexo：即新建一个文件夹,如E:\hexo,然后运行git bash程序，在git命令框中执行命令：<br>(1)新建E:\hexo 文件夹，安装hexo客户端<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> e:\hexo<span class="comment">#切进需要安装hexo的空目录</span></div><div class="line">$ npm install hexo-cli -g<span class="comment">#hexo客户端安装</span></div><div class="line">$ npm install hexo --save<span class="comment">#执行hexo安装命令</span></div><div class="line">$ hexo -v<span class="comment">#检查版本号</span></div></pre></td></tr></table></figure></p><p>(2)新建E:\hexo_file文件夹(这个文件夹将作为你存放代码的地方)，初始化项目代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> e:\hexo_file<span class="comment">#切进目录</span></div><div class="line">$ hexo init<span class="comment">#初始化文件</span></div><div class="line">$ hexo g <span class="comment">#生成网页</span></div><div class="line">$ hexo s <span class="comment">#启动服务</span></div></pre></td></tr></table></figure></p><p><img src="/2017/09/14/create-blog/image1.png" alt=""></p><blockquote><p>图为：初始化文件后生成的目录结构</p></blockquote><p><img src="/2017/09/14/create-blog/image2.png" alt=""></p><blockquote><p>图为：本地服务启动成功截图（访问博客<a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a>，关闭服务快捷键：Ctrl+c）</p></blockquote><p><img src="/2017/09/14/create-blog/image3.png" alt=""></p><blockquote><p>图为：成功访问博客</p></blockquote><h2 id="搭建github"><a href="#搭建github" class="headerlink" title="搭建github"></a>搭建github</h2><p>(1)创建仓库：新建一个名为你的用户名.github.io的仓库，例如：我的用户名为gh-jsong，那么我的仓库名必须是gh-jsong.github.io(原因是GitHub服务器会帮我们托管[用户名].github.io代码库中的全部代码，并自动运行 )<br><img src="/2017/09/14/create-blog/image4.png" alt=""></p><blockquote><p>图为：新建仓库</p></blockquote><p><img src="/2017/09/14/create-blog/image5.png" alt=""></p><blockquote><p>图为：配置仓库名称（必须是github用户名.github.io）</p></blockquote><p>(2)配置GitHub Pages<br><img src="/2017/09/14/create-blog/image6.png" alt=""></p><blockquote><p>图为：选择主题（github会自动生成默认的欢迎页面）</p></blockquote><p><img src="/2017/09/14/create-blog/image7.png" alt=""></p><blockquote><p>图为：绑定域名（通过绑定的域名可以访问github pages个人主页，前提得配置域名解析，若未绑定域名则可通过user.github.io访问，以我的为例：gh-jsong.github.io ）</p></blockquote><p>(3)域名解析（以阿里云购买的域名为例）<br><img src="/2017/09/14/create-blog/image8.png" alt=""></p><blockquote><p>图为：域名解析</p></blockquote><p>域名解析配置的两种方式：CNAME和A记录<br>CNAME：填写域名（我采用这种方式）<br>A记录：填写ip<br>到这里博客搭建就完成了，可以通过域名访问了（域名解析可能会花一段时间）</p><h2 id="配置GitHub与Hexo关联"><a href="#配置GitHub与Hexo关联" class="headerlink" title="配置GitHub与Hexo关联"></a>配置GitHub与Hexo关联</h2><p>目的： 用于将hexo博客框架创建生成的博客页面上传到github pages服务器<br>(1)生成秘钥（使用git bash命令框）<br>git配置（只执行一次）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name <span class="string">"gh-jsong"</span>     <span class="comment">#github用户名</span></div><div class="line">$ git config --global user.email <span class="string">"ms_jiasong@hotmail.com"</span> <span class="comment">#（使用github注册使用的邮箱）</span></div><div class="line">$ ssh-keygen -t rsa -C<span class="string">"ms_jiasong@hotmail.com"</span><span class="comment">#生成秘钥</span></div></pre></td></tr></table></figure></p><p><img src="/2017/09/14/create-blog/image9.png" alt=""></p><blockquote><p>图为：查看秘钥所在文件夹</p></blockquote><p><img src="/2017/09/14/create-blog/image10.png" alt=""></p><blockquote><p>图为：id_rsa.pub文件就是我们需要的秘钥</p></blockquote><p>(2)GitHub配置SSH key<br>点击settings进入设置界面，左侧个人设置（Personal settings）中，点击SSH and GPG keys，在点击右上角New SSH key按钮，则弹出如下图的添加秘钥窗口：</p><p><img src="/2017/09/14/create-blog/image11.png" alt=""></p><blockquote><p>图为：github连接本地hexo所添加的秘钥</p></blockquote><p>(3)配置_config.yml中deploy部分<br>打开E:\hexo_file文件夹中的_config.yml文件修改配置</p><p><img src="/2017/09/14/create-blog/image12.png" alt=""></p><blockquote><p>图为：hexo上传项目代码所需要的配置</p></blockquote><p>到这里个人博客搭建完成</p><h2 id="提交项目到GitHub"><a href="#提交项目到GitHub" class="headerlink" title="提交项目到GitHub"></a>提交项目到GitHub</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"XXX"</span>创建博客文章</div><div class="line">$ hexo g    <span class="comment">#生成</span></div><div class="line">$ hexo d    <span class="comment">#部署</span></div></pre></td></tr></table></figure><p>部署完成就可以通过域名访问<a href="http://www.jsong.site" target="_blank" rel="external">我的博客</a></p><h2 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h2><p>Hexo的强大之处就在于支持多种风格的主题，我推荐安装其中NexT、Yilia、Yelee、Tranquilpeak这几个美观 主题。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo clean</div><div class="line">$ git <span class="built_in">clone</span> https://github.com/litten/hexo-theme-yilia.git themes/Tranquilpeak <span class="comment">#下载主题</span></div></pre></td></tr></table></figure></p><p>主题下载完成后修改hexo的_config.yml配置文件，将默认主题名改为下载的主题名：<br><img src="/2017/09/14/create-blog/image13.png" alt=""></p><blockquote><p>图为：_config.yml主题配置（我选用的是Tranquilpeak主题）</p></blockquote><h2 id="图片连接"><a href="#图片连接" class="headerlink" title="图片连接"></a>图片连接</h2><p>（1）修改hexo的_config.yml配置文件，将post_asset_folder:false改为true<br><img src="/2017/09/14/create-blog/image14.png" alt=""></p><blockquote><p>图为：_config.yml主题配置（我选用的是Tranquilpeak主题）</p></blockquote><p>（2）在hexo目录下执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install https://github.com/CodeFalling/hexo-asset-image --save</div></pre></td></tr></table></figure></p><p>（3）使用命令新建文章，_post目录下就会生成与文章名一样的文件夹，这个文件夹用于存放静态资源<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"文章名"</span></div></pre></td></tr></table></figure></p><p><img src="/2017/09/14/create-blog/image15.png" alt=""></p><blockquote><p>图为：将需要引用的图片存放在与文章名同名的文件夹</p></blockquote><p>（4）图片的Markdown连接语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">![名称（可不填）](文章同名文件夹名/image8.png)</div><div class="line">![]( create-blog/image8.png)</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍如何使用Hexo+GitHub搭建一个使用域名访问的个人博客网站。由于没有数据库访问，也无需购买服务器，成本极低，非常适合搭建个人博客网站，本人还只是菜鸟，其中的内容有什么不正确的还请指正。  &lt;/p&gt;
&lt;h2 id=&quot;技术介绍&quot;&gt;&lt;a href=&quot;#技术介绍&quot; class=&quot;headerlink&quot; title=&quot;技术介绍&quot;&gt;&lt;/a&gt;技术介绍&lt;/h2&gt;&lt;p&gt;Hexo是基于Nodo.js的一个快速，简单和强大的博客框架。Hexo会将Markdown语言（或其他语言）中撰写帖子在几秒钟内生成具有美丽主题的静态文件。&lt;/p&gt;
&lt;p&gt;Node.js 就是运行在服务端的 JavaScript。换句话说就是可以使用Node.js搭建静态服务器，Hexo就是基于Nodo.js的博客框架。&lt;/p&gt;
&lt;p&gt;GitHub其实就是一个面向开源及私有软件项目的托管平台，GitHub pages是GitHub为我们免费提供的服务器，GitHub pages 会托管[用户名].github.io代码库中的全部代码，并自动运行，因此GitHub就可以作为我们服务器而不需要购买额外的服务器或者云主机。&lt;/p&gt;
&lt;h2 id=&quot;搭建步骤介绍&quot;&gt;&lt;a href=&quot;#搭建步骤介绍&quot; class=&quot;headerlink&quot; title=&quot;搭建步骤介绍&quot;&gt;&lt;/a&gt;搭建步骤介绍&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;1.安装Node.js
2.安装git
3.安装Hexo
4.搭建GitHub
5.配置GitHub与Hexo关联
6.提交项目到GitHub
7.安装主题
8.图片连接
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="github pages + hexo + 域名解析" scheme="http://yoursite.com/tags/github-pages-hexo-%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
</feed>
